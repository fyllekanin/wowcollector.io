definitions:
  blizzarddata.BattleNetRegion:
    enum:
    - eu
    - us
    type: string
    x-enum-varnames:
    - REGION_EU
    - REGION_US
  documents.MountViewCategory:
    properties:
      categories:
        items:
          $ref: '#/definitions/documents.MountViewCategory'
        type: array
      id:
        type: string
      mounts:
        items:
          $ref: '#/definitions/documents.MountViewCategoryMount'
        type: array
      name:
        type: string
      order:
        type: integer
    type: object
  documents.MountViewCategoryMount:
    properties:
      id:
        type: integer
      order:
        type: integer
    type: object
  documents.PetViewCategory:
    properties:
      categories:
        items:
          $ref: '#/definitions/documents.PetViewCategory'
        type: array
      id:
        type: string
      name:
        type: string
      order:
        type: integer
      pets:
        items:
          $ref: '#/definitions/documents.PetViewCategoryPet'
        type: array
    type: object
  documents.PetViewCategoryPet:
    properties:
      id:
        type: integer
      order:
        type: integer
    type: object
  documents.ToyViewCategory:
    properties:
      categories:
        items:
          $ref: '#/definitions/documents.ToyViewCategory'
        type: array
      id:
        type: string
      name:
        type: string
      order:
        type: integer
      toys:
        items:
          $ref: '#/definitions/documents.ToyViewCategoryToy'
        type: array
    type: object
  documents.ToyViewCategoryToy:
    properties:
      id:
        type: integer
      order:
        type: integer
    type: object
  errorcodes.ErrorCode:
    enum:
    - CHARACTER_NOT_FOUND
    - LOADING_BATTLE_NET_DATA
    - INTERNAL_ERROR
    - NO_DEFAULT_MOUNT_VIEW
    - NO_DEFAULT_TOY_VIEW
    - NO_MOUNT_VIEW_WITH_NAME
    type: string
    x-enum-varnames:
    - CHARACTER_NOT_FOUND
    - LOADING_BATTLE_NET_DATA
    - INTERNAL_ERROR
    - NO_DEFAULT_MOUNT_VIEW
    - NO_DEFAULT_TOY_VIEW
    - NO_MOUNT_VIEW_WITH_NAME
  errorresponse.ErrorResponse:
    properties:
      code:
        $ref: '#/definitions/errorcodes.ErrorCode'
      message:
        type: string
    type: object
  httprequests.MountViewRequest:
    properties:
      categories:
        items:
          $ref: '#/definitions/documents.MountViewCategory'
        type: array
      isUnknownIncluded:
        type: boolean
      name:
        type: string
    type: object
  httprequests.PetViewRequest:
    properties:
      categories:
        items:
          $ref: '#/definitions/documents.PetViewCategory'
        type: array
      isUnknownIncluded:
        type: boolean
      name:
        type: string
    type: object
  httprequests.ToyViewRequest:
    properties:
      categories:
        items:
          $ref: '#/definitions/documents.ToyViewCategory'
        type: array
      isUnknownIncluded:
        type: boolean
      name:
        type: string
    type: object
  response.AchievementCollectionAchievement:
    properties:
      description:
        type: string
      displayOrder:
        type: integer
      icon:
        type: string
      id:
        type: integer
      isCompleted:
        type: boolean
      name:
        type: string
      points:
        type: integer
    type: object
  response.AchievementCollectionCategorySwagger:
    properties:
      achievements:
        items:
          $ref: '#/definitions/response.AchievementCollectionAchievement'
        type: array
      categories:
        items:
          type: object
        type: array
      displayOrder:
        type: integer
      name:
        type: string
    type: object
  response.CharacterProfileAssets:
    properties:
      avatar:
        type: string
      inset:
        type: string
      mainRaw:
        type: string
    type: object
  response.CharacterProfileResponse:
    properties:
      assets:
        $ref: '#/definitions/response.CharacterProfileAssets'
      faction:
        type: string
      level:
        type: integer
      name:
        type: string
      realm:
        type: string
      region:
        type: string
    type: object
  response.LeaderboardEntry:
    properties:
      character:
        type: string
      count:
        type: integer
      realm:
        type: string
      region:
        type: string
    type: object
  response.MountAssets:
    properties:
      display:
        type: string
      largeIcon:
        type: string
      smallIcon:
        type: string
    type: object
  response.MountCollectionCategorySwagger:
    properties:
      categories:
        items:
          type: object
        type: array
      mounts:
        items:
          $ref: '#/definitions/response.MountCollectionMount'
        type: array
      name:
        type: string
      order:
        type: integer
    type: object
  response.MountCollectionMount:
    properties:
      assets:
        $ref: '#/definitions/response.MountAssets'
      description:
        type: string
      id:
        type: integer
      isCollected:
        type: boolean
      name:
        type: string
    type: object
  response.MountResponse:
    properties:
      assets:
        $ref: '#/definitions/response.MountAssets'
      description:
        type: string
      id:
        type: integer
      isUnobtainable:
        type: boolean
      name:
        type: string
    type: object
  response.PaginationResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/response.LeaderboardEntry'
        type: array
      total:
        type: integer
    type: object
  response.PetAssets:
    properties:
      largeIcon:
        type: string
    type: object
  response.PetCollectionCategorySwagger:
    properties:
      categories:
        items:
          type: object
        type: array
      name:
        type: string
      order:
        type: integer
      pets:
        items:
          $ref: '#/definitions/response.PetCollectionPet'
        type: array
    type: object
  response.PetCollectionPet:
    properties:
      assets:
        $ref: '#/definitions/response.PetAssets'
      id:
        type: integer
      isCollected:
        type: boolean
      name:
        type: string
    type: object
  response.RealmResponse:
    properties:
      name:
        type: string
      region:
        $ref: '#/definitions/blizzarddata.BattleNetRegion'
      slug:
        type: string
    type: object
  response.RegionRealmResponse:
    properties:
      realms:
        items:
          $ref: '#/definitions/response.RealmResponse'
        type: array
      regions:
        items:
          $ref: '#/definitions/response.RegionResponse'
        type: array
    type: object
  response.RegionResponse:
    properties:
      name:
        type: string
      value:
        $ref: '#/definitions/blizzarddata.BattleNetRegion'
    type: object
  response.ToyAssets:
    properties:
      largeIcon:
        type: string
    type: object
  response.ToyCollectionCategorySwagger:
    properties:
      categories:
        items:
          type: object
        type: array
      name:
        type: string
      order:
        type: integer
      toys:
        items:
          $ref: '#/definitions/response.ToyCollectionToy'
        type: array
    type: object
  response.ToyCollectionToy:
    properties:
      assets:
        $ref: '#/definitions/response.ToyAssets'
      id:
        type: integer
      isCollected:
        type: boolean
      itemId:
        type: integer
      name:
        type: string
    type: object
  response.ToyResponse:
    properties:
      assets:
        $ref: '#/definitions/response.ToyAssets'
      id:
        type: integer
      isUnobtainable:
        type: boolean
      itemId:
        type: integer
      name:
        type: string
    type: object
host: localhost:8888
info:
  contact: {}
  description: wowcollector.io API description
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: wowcollector.io
  version: "1.0"
paths:
  /api/v1/battle-net/mounts:
    get:
      description: Get all the mounts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.MountResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorresponse.ErrorResponse'
      summary: Fetch all mounts
      tags:
      - BattleNet
  /api/v1/battle-net/pets:
    get:
      description: Get all the pets
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.MountResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorresponse.ErrorResponse'
      summary: Fetch all pets
      tags:
      - BattleNet
  /api/v1/battle-net/realms-regions:
    get:
      description: Get all the realms and regions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.RegionRealmResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorresponse.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errorresponse.ErrorResponse'
      summary: Fetch all realms and regions
      tags:
      - BattleNet
  /api/v1/battle-net/toys:
    get:
      description: Get all the toys
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.ToyResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorresponse.ErrorResponse'
      summary: Fetch all toys
      tags:
      - BattleNet
  /api/v1/character/{region}/{realm}/{character}:
    get:
      description: Get summary information about a character
      parameters:
      - description: Region
        in: path
        name: region
        required: true
        type: string
      - description: Realm
        in: path
        name: realm
        required: true
        type: string
      - description: Character
        in: path
        name: character
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CharacterProfileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorresponse.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errorresponse.ErrorResponse'
      summary: Fetch character profile
      tags:
      - Character
  /api/v1/character/{region}/{realm}/{character}/achievements:
    get:
      description: Get achievement collection for character
      parameters:
      - description: Region
        in: path
        name: region
        required: true
        type: string
      - description: Realm
        in: path
        name: realm
        required: true
        type: string
      - description: Character
        in: path
        name: character
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.AchievementCollectionCategorySwagger'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorresponse.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errorresponse.ErrorResponse'
      summary: Fetch character achievement collection
      tags:
      - Character
  /api/v1/character/{region}/{realm}/{character}/mounts:
    get:
      description: Get mount collection for character
      parameters:
      - description: Region
        in: path
        name: region
        required: true
        type: string
      - description: Realm
        in: path
        name: realm
        required: true
        type: string
      - description: Character
        in: path
        name: character
        required: true
        type: string
      - description: ViewID
        in: query
        name: viewId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.MountCollectionCategorySwagger'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorresponse.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errorresponse.ErrorResponse'
      summary: Fetch character mount collection
      tags:
      - Character
  /api/v1/character/{region}/{realm}/{character}/pets:
    get:
      description: Get pet collection for character
      parameters:
      - description: Region
        in: path
        name: region
        required: true
        type: string
      - description: Realm
        in: path
        name: realm
        required: true
        type: string
      - description: Character
        in: path
        name: character
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.PetCollectionCategorySwagger'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorresponse.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errorresponse.ErrorResponse'
      summary: Fetch character pet collection
      tags:
      - Character
  /api/v1/character/{region}/{realm}/{character}/toys:
    get:
      description: Get toy collection for character
      parameters:
      - description: Region
        in: path
        name: region
        required: true
        type: string
      - description: Realm
        in: path
        name: realm
        required: true
        type: string
      - description: Character
        in: path
        name: character
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.ToyCollectionCategorySwagger'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorresponse.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errorresponse.ErrorResponse'
      summary: Fetch character toy collection
      tags:
      - Character
  /api/v1/feedback:
    post:
      consumes:
      - multipart/form-data
      description: Submit a feedback form which will create a github issue
      parameters:
      - description: Description
        in: formData
        name: description
        required: true
        type: string
      - description: Attachments (multiple files)
        in: formData
        name: attachments
        type: file
      - description: Email (optional)
        in: formData
        name: email
        type: string
      - description: BattleTag (optional)
        in: formData
        name: battleTag
        type: string
      - description: Rating
        in: formData
        name: rating
        type: integer
      - description: bug or feedback
        in: formData
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorresponse.ErrorResponse'
      summary: Submit a feedback form
      tags:
      - Feedback
  /api/v1/item-view/mount:
    post:
      consumes:
      - application/json
      description: Create an mount view
      parameters:
      - description: View JSON
        in: body
        name: view
        required: true
        schema:
          $ref: '#/definitions/httprequests.MountViewRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorresponse.ErrorResponse'
      summary: Create mount view
      tags:
      - ItemView
  /api/v1/item-view/pet:
    post:
      consumes:
      - application/json
      description: Create an pet view
      parameters:
      - description: View JSON
        in: body
        name: view
        required: true
        schema:
          $ref: '#/definitions/httprequests.PetViewRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorresponse.ErrorResponse'
      summary: Create pet view
      tags:
      - ItemView
  /api/v1/item-view/toy:
    post:
      consumes:
      - application/json
      description: Create an toy view
      parameters:
      - description: View JSON
        in: body
        name: view
        required: true
        schema:
          $ref: '#/definitions/httprequests.ToyViewRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorresponse.ErrorResponse'
      summary: Create toy view
      tags:
      - ItemView
  /api/v1/leaderboard/mounts:
    get:
      description: Get the leaderboard mounts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.PaginationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorresponse.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errorresponse.ErrorResponse'
      summary: Fetch leaderboard for mounts
      tags:
      - BattleNet
swagger: "2.0"
